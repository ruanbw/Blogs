import{_ as a,o as e,c as o,X as t}from"./chunks/framework.6e839c56.js";const S=JSON.parse('{"title":"浏览器渲染原理","description":"","frontmatter":{},"headers":[],"relativePath":"pages/web/浏览器渲染原理.md","filePath":"pages/web/浏览器渲染原理.md","lastUpdated":1694348019000}'),r={name:"pages/web/浏览器渲染原理.md"},p=t('<h1 id="浏览器渲染原理" tabindex="-1">浏览器渲染原理 <a class="header-anchor" href="#浏览器渲染原理" aria-label="Permalink to &quot;浏览器渲染原理&quot;">​</a></h1><h2 id="什么是渲染" tabindex="-1">什么是渲染? <a class="header-anchor" href="#什么是渲染" aria-label="Permalink to &quot;什么是渲染?&quot;">​</a></h2><p>渲染 === Render,在不同的场景下它的含义是不一样的</p><p>在 Vue、React 中也有 Render，它们的含义是得到一个虚拟 DOM</p><p>影视制作中的 Render 是把动画的 3D 模型变为一帧一帧的画面</p><p>浏览器的 Render 指的是什么？</p><p>把一个 Html 字符串变成屏幕上的像素信息</p><h2 id="浏览器是如何渲染页面的" tabindex="-1">浏览器是如何渲染页面的？ <a class="header-anchor" href="#浏览器是如何渲染页面的" aria-label="Permalink to &quot;浏览器是如何渲染页面的？&quot;">​</a></h2><p>当浏览器的网络线程收到 HTML 文档后，会产生一个渲染任务，并将其传递给渲染主线程的消息队列。</p><p>在事件循环机制的作用下，渲染主线程取出消息队列中的渲染任务，开启渲染流程。</p><p>整个渲染流程分为多个阶段，分别是： HTML 解析、样式计算、布局、分层、绘制、分块、光栅化、画</p><p>每个阶段都有明确的输入输出，上一个阶段的输出会成为下一个阶段的输入。</p><p>这样，整个渲染流程就形成了一套组织严密的生产流水线。</p><h3 id="渲染的第一步是解析-html。" tabindex="-1">渲染的第一步是<strong>解析 HTML</strong>。 <a class="header-anchor" href="#渲染的第一步是解析-html。" aria-label="Permalink to &quot;渲染的第一步是**解析 HTML**。&quot;">​</a></h3><p>解析过程中遇到 CSS 解析 CSS，遇到 JS 执行 JS。为了提高解析效率，浏览器在开始解析前，会启动一个预解析的线程，率先下载 HTML 中的外部 CSS 文件和 外部的 JS 文件。</p><p>如果主线程解析到<code>link</code>位置，此时外部的 CSS 文件还没有下载解析好，主线程不会等待，继续解析后续的 HTML。这是因为下载和解析 CSS 的工作是在预解析线程中进行的。这就是 CSS 不会阻塞 HTML 解析的根本原因。</p><p>如果主线程解析到<code>script</code>位置，会停止解析 HTML，转而等待 JS 文件下载好，并将全局代码解析执行完成后，才能继续解析 HTML。这是因为 JS 代码的执行过程可能会修改当前的 DOM 树，所以 DOM 树的生成必须暂停。这就是 JS 会阻塞 HTML 解析的根本原因。</p><p>第一步完成后，会得到 DOM 树和 CSSOM 树，浏览器的默认样式、内部样式、外部样式、行内样式均会包含在 CSSOM 树中。</p><h3 id="渲染的下一步是样式计算。" tabindex="-1">渲染的下一步是<strong>样式计算</strong>。 <a class="header-anchor" href="#渲染的下一步是样式计算。" aria-label="Permalink to &quot;渲染的下一步是**样式计算**。&quot;">​</a></h3><p>主线程会遍历得到的 DOM 树，依次为树中的每个节点计算出它最终的样式，称之为 Computed Style。</p><p>在这一过程中，很多预设值会变成绝对值，比如<code>red</code>会变成<code>rgb(255,0,0)</code>；相对单位会变成绝对单位，比如<code>em</code>会变成<code>px</code></p><p>这一步完成后，会得到一棵带有样式的 DOM 树。</p><h3 id="接下来是布局-布局完成后会得到布局树。" tabindex="-1">接下来是<strong>布局</strong>，布局完成后会得到布局树。 <a class="header-anchor" href="#接下来是布局-布局完成后会得到布局树。" aria-label="Permalink to &quot;接下来是**布局**，布局完成后会得到布局树。&quot;">​</a></h3><p>布局阶段会依次遍历 DOM 树的每一个节点，计算每个节点的几何信息。例如节点的宽高、相对包含块的位置。</p><p>大部分时候，DOM 树和布局树并非一一对应。</p><p>比如<code>display:none</code>的节点没有几何信息，因此不会生成到布局树；又比如使用了伪元素选择器，虽然 DOM 树中不存在这些伪元素节点，但它们拥有几何信息，所以会生成到布局树中。还有匿名行盒、匿名块盒等等都会导致 DOM 树和布局树无法一一对应。</p><h3 id="下一步是分层" tabindex="-1">下一步是<strong>分层</strong> <a class="header-anchor" href="#下一步是分层" aria-label="Permalink to &quot;下一步是**分层**&quot;">​</a></h3><p>主线程会使用一套复杂的策略对整个布局树中进行分层。</p><p>分层的好处在于，将来某一个层改变后，仅会对该层进行后续处理，从而提升效率。</p><p>滚动条、堆叠上下文、transform、opacity 等样式都会或多或少的影响分层结果，也可以通过<code>will-change</code>属性更大程度的影响分层结果。</p><h3 id="再下一步是绘制" tabindex="-1">再下一步是<strong>绘制</strong> <a class="header-anchor" href="#再下一步是绘制" aria-label="Permalink to &quot;再下一步是**绘制**&quot;">​</a></h3><p>主线程会为每个层单独产生绘制指令集，用于描述这一层的内容该如何画出来。</p><p>完成绘制后，主线程将每个图层的绘制信息提交给合成线程，剩余工作将由合成线程完成。</p><p>合成线程首先对每个图层进行分块，将其划分为更多的小区域。</p><p>它会从线程池中拿取多个线程来完成分块工作。</p><h3 id="分块完成后-进入光栅化阶段。" tabindex="-1">分块完成后，进入<strong>光栅化</strong>阶段。 <a class="header-anchor" href="#分块完成后-进入光栅化阶段。" aria-label="Permalink to &quot;分块完成后，进入**光栅化**阶段。&quot;">​</a></h3><p>合成线程会将块信息交给 GPU 进程，以极高的速度完成光栅化。</p><p>GPU 进程会开启多个线程来完成光栅化，并且优先处理靠近视口区域的块。</p><p>光栅化的结果，就是一块一块的位图</p><h3 id="最后一个阶段就是画了" tabindex="-1">最后一个阶段就是<strong>画</strong>了 <a class="header-anchor" href="#最后一个阶段就是画了" aria-label="Permalink to &quot;最后一个阶段就是**画**了&quot;">​</a></h3><p>合成线程拿到每个层、每个块的位图后，生成一个个「指引（quad）」信息。</p><p>指引会标识出每个位图应该画到屏幕的哪个位置，以及会考虑到旋转、缩放等变形。</p><p>变形发生在合成线程，与渲染主线程无关，这就是<code>transform</code>效率高的本质原因。</p><p>合成线程会把 quad 提交给 GPU 进程，由 GPU 进程产生系统调用，提交给 GPU 硬件，完成最终的屏幕成像。</p>',44),d=[p];function n(s,c,h,i,l,_){return e(),o("div",null,d)}const m=a(r,[["render",n]]);export{S as __pageData,m as default};
