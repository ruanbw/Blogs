import{_ as s,o as a,c as l,X as n}from"./chunks/framework.6e839c56.js";const h=JSON.parse('{"title":"浏览器事件循环 Event Loop","description":"","frontmatter":{},"headers":[],"relativePath":"pages/web/浏览器事件循环.md","filePath":"pages/web/浏览器事件循环.md","lastUpdated":1694348019000}'),p={name:"pages/web/浏览器事件循环.md"},o=n(`<h1 id="浏览器事件循环-event-loop" tabindex="-1">浏览器事件循环 Event Loop <a class="header-anchor" href="#浏览器事件循环-event-loop" aria-label="Permalink to &quot;浏览器事件循环 Event Loop&quot;">​</a></h1><p>浏览器事件循环是浏览器处理用户交互和执行 JavaScript 代码的机制。</p><h2 id="浏览器的进程模型" tabindex="-1">浏览器的进程模型 <a class="header-anchor" href="#浏览器的进程模型" aria-label="Permalink to &quot;浏览器的进程模型&quot;">​</a></h2><h3 id="何为进程" tabindex="-1">何为进程？ <a class="header-anchor" href="#何为进程" aria-label="Permalink to &quot;何为进程？&quot;">​</a></h3><p>程序运⾏需要有它⾃⼰专属的内存空间，可以把这块内存空间简单的理解为进程</p><p>每个应⽤⾄少有⼀个进程，进程之间相互独⽴，即使要通信，也需要双⽅同意。</p><h3 id="何为线程" tabindex="-1">何为线程？ <a class="header-anchor" href="#何为线程" aria-label="Permalink to &quot;何为线程？&quot;">​</a></h3><p>有了进程后，就可以运⾏程序的代码了。</p><p>运⾏代码的「⼈」称之为「线程」。</p><p>⼀个进程⾄少有⼀个线程，所以在进程开启后会⾃动创建⼀个线程来运⾏ 代码，该线程称之为主线程。</p><p>如果程序需要同时执⾏多块代码，主线程就会启动更多的线程来执⾏代 码，所以⼀个进程中可以包含多个线程。</p><h3 id="浏览器有哪些进程和线程" tabindex="-1">浏览器有哪些进程和线程？ <a class="header-anchor" href="#浏览器有哪些进程和线程" aria-label="Permalink to &quot;浏览器有哪些进程和线程？&quot;">​</a></h3><p>浏览器是⼀个多进程多线程的应⽤程序</p><p>浏览器内部⼯作极其复杂。</p><p>为了避免相互影响，为了减少连环崩溃的⼏率，当启动浏览器后，它会⾃ 动启动多个进程。</p><blockquote><p>可以在浏览器的任务管理器中查看当前的所有进程</p></blockquote><p>其中最主要的进程有：</p><p><strong>1. 浏览器进程</strong></p><p>主要负责界⾯显示、⽤户交互、⼦进程管理等。浏览器进程内部会启动多个线程处理不同的任务。</p><p>浏览器上的搜索栏、前进后退按钮、标签显示、书签栏等都是由浏览器进程负责的。</p><p><strong>2. ⽹络进程</strong></p><p>负责加载⽹络资源。⽹络进程内部会启动多个线程来处理不同的⽹络任务。</p><p><strong>3. 渲染进程（事件循环就发生在这）</strong></p><p>渲染进程启动后，会开启⼀个渲染主线程，渲染主线程负责执⾏ HTML、CSS、JS 代码。<strong>(JS 是单线程说的就是渲染主线程)</strong></p><p>默认情况下，浏览器会为每个标签⻚开启⼀个新的渲染进程，以保证不同的标签⻚之间不相互影响。多个渲染进程会占用很多内存。</p><ul><li>最近浏览器最的新版本里想改变每个标签页都是一个渲染进程的模式。</li><li>针对不同平台把浏览器作为一个操作系统，改为一个站点一个渲染进程，比如 5 个百度标签页共用一个渲染进程。</li></ul><blockquote><p>当前还是默认模式，将来该默认模式可能会有所改变，有兴趣的可⻅ <a href="https://chromium.googlesource.com/chromium/src/+/main/docs/process_model_and_site_isolation.md#Modes-and-Availability" target="_blank" rel="noreferrer">Chrome 官⽅说明⽂档</a></p></blockquote><h2 id="渲染主线程是如何工作的" tabindex="-1">渲染主线程是如何⼯作的？ <a class="header-anchor" href="#渲染主线程是如何工作的" aria-label="Permalink to &quot;渲染主线程是如何⼯作的？&quot;">​</a></h2><p>渲染主线程是浏览器中最繁忙的线程，需要它处理的任务包括但不限于：</p><ul><li>解析 HTML</li><li>解析 CSS</li><li>计算样式</li><li>布局</li><li>处理图层</li><li>每秒把⻚⾯画 60 次</li><li>执⾏全局 JS 代码</li><li>执⾏事件处理函数</li><li>执⾏计时器的回调函数</li><li>......</li></ul><blockquote><p>思考题：为什么渲染进程不适⽤多个线程来处理这些事情？</p></blockquote><p>要处理这么多的任务，主线程遇到了⼀个前所未有的难题：如何调度任务？</p><p>⽐如：</p><ul><li>我正在执⾏⼀个 JS 函数，执⾏到⼀半的时候⽤户点击了按钮，我该⽴即去执⾏点击事件的处理函数吗？</li><li>我正在执⾏⼀个 JS 函数，执⾏到⼀半的时候某个计时器到达了时间，我该⽴即去执⾏它的回调吗？</li><li>浏览器进程通知我“⽤户点击了按钮”，与此同时，某个计时器也到达了时间，我应该处理哪⼀个呢？</li><li>......</li></ul><p>渲染主线程想出了⼀个绝妙的主意来处理这个问题：<strong>排队</strong></p><ol><li><p>在最开始的时候，渲染主线程会进⼊⼀个⽆限循环</p></li><li><p>每⼀次循环会检查消息队列中是否有任务存在。如果有，就取出第⼀个任务执⾏，执⾏完⼀个后进⼊下⼀次循环；如果没有，则进⼊休眠状态。</p></li><li><p>其他所有线程（包括其他进程的线程）可以随时向消息队列添加任务。新任务会加到消息队列的末尾。在添加新任务时，如果主线程是休眠状态，则会将其唤醒以继续循环拿取任务</p></li></ol><p>这样⼀来，就可以让每个任务有条不紊的、持续的进⾏下去了。</p><p>整个过程，被称之为<strong>事件循环（事件循环为 W3C 的叫法,浏览器源码实现的叫消息循环，只是叫法不同）</strong></p><h2 id="若干解释" tabindex="-1">若⼲解释 <a class="header-anchor" href="#若干解释" aria-label="Permalink to &quot;若⼲解释&quot;">​</a></h2><h3 id="何为异步" tabindex="-1">何为异步？ <a class="header-anchor" href="#何为异步" aria-label="Permalink to &quot;何为异步？&quot;">​</a></h3><p>代码在执⾏过程中，会遇到⼀些⽆法⽴即处理的任务，⽐如：</p><ul><li>计时完成后需要执⾏的任务 —— setTimeout 、 setInterval</li><li>⽹络通信完成后需要执⾏的任务 -- XHR 、 Fetch</li><li>⽤户操作后需要执⾏的任务 -- addEventListener</li><li>如果让渲染主线程等待这些任务的时机达到，就会导致主线程⻓期处于「阻塞」的状态，从⽽导致浏览器「卡死」</li></ul><p><strong>渲染主线程承担着极其重要的⼯作，无论如何都不能阻塞！</strong></p><p>因此，浏览器选择<strong>异步</strong>来解决这个问题</p><p>使⽤异步的⽅式，<strong>渲染主线程永不阻塞</strong></p><blockquote><p>⾯试题：如何理解 JS 的异步？</p><p>参考答案：</p><p>JS 是⼀⻔单线程的语⾔，这是因为它运⾏在浏览器的渲染主线程中，⽽渲染 主线程只有⼀个。</p><p>⽽渲染主线程承担着诸多的⼯作，渲染⻚⾯、执⾏ JS 都在其中运⾏。如果使⽤同步的⽅式，就极有可能导致主线程产⽣阻塞，从⽽导致消息队列中的很多其他任务⽆法得到执⾏。</p><p>这样⼀来，⼀⽅⾯会导致繁忙的主线程⽩⽩的消耗时间，另⼀⽅⾯导致⻚⾯⽆法及时更新，给⽤户造成卡死现象。</p><p>所以浏览器采⽤异步的⽅式来避免。具体做法是当某些任务发⽣时，⽐如计时器、⽹络、事件监听，主线程将任务交给其他线程去处理，⾃身⽴即结束任务的执⾏，转⽽执⾏后续代码。当其他线程完成时，将事先传递的回调函数包装成任务，加⼊到消息队列的末尾排队，等待主线程调度执⾏。 在这种异步模式下，浏览器永不阻塞，从⽽最⼤限度的保证了单线程的流畅运⾏。</p></blockquote><h2 id="js-为何会阻碍渲染" tabindex="-1">JS 为何会阻碍渲染？ <a class="header-anchor" href="#js-为何会阻碍渲染" aria-label="Permalink to &quot;JS 为何会阻碍渲染？&quot;">​</a></h2><p>先看代码</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">Mr.Yuan is awesome!</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">change</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> h1 </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">h1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> btn </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">button</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 死循环指定的时间</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">delay</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">duration</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">start</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">Date</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">now</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">Date</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">now</span><span style="color:#F07178;">() </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">start</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">duration</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">  btn</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onclick</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">h1</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">textContent</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">坤坤</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">delay</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">3000</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>点击按钮后，会发⽣什么呢？</p><h2 id="任务有优先级吗" tabindex="-1">任务有优先级吗？ <a class="header-anchor" href="#任务有优先级吗" aria-label="Permalink to &quot;任务有优先级吗？&quot;">​</a></h2><p>任务没有优先级，在消息队列中先进先出</p><p>但消息队列是有优先级的</p><p>根据 W3C 的最新解释:</p><ul><li><p>每个任务都有⼀个任务类型，同⼀个类型的任务必须在⼀个队列，不同类型的任务可以分属于不同的队列。</p></li><li><p>在⼀次事件循环中，浏览器可以根据实际情况从不同的队列中取出任务执⾏。</p></li></ul><p>浏览器必须准备好⼀个微队列，微队列中的任务优先所有其他任务执⾏<a href="https://html.spec.whatwg.org/multipage/webappapis.html#perform-a-microtask-checkpoint" target="_blank" rel="noreferrer">Chrome 官方解释</a></p><blockquote><p>随着浏览器的复杂度急剧提升，W3C 不再使⽤宏队列的说法</p></blockquote><p>在⽬前 chrome 的实现中，⾄少包含了下⾯的队列：</p><ul><li>微队列：⽤户存放需要最快执⾏的任务，优先级「最⾼」</li><li>交互队列：⽤于存放⽤户操作后产⽣的事件处理任务，优先级「⾼」</li><li>延时队列：⽤于存放计时器到达后的回调任务，优先级「中」</li></ul><p>添加任务到微队列的主要⽅式主要是使⽤ Promise、MutationObserver</p><blockquote><p>⾯试题：阐述⼀下 JS 的事件循环</p><p>事件循环⼜叫做消息循环，是浏览器渲染主线程的⼯作⽅式。在 Chrome 的源码中，它开启⼀个不会结束的 for 循环，每次循环从消息队列中取出第⼀个任务执⾏，⽽其他线程只需要在合适的时候将任务加⼊到队列末尾即可。</p><p>过去把消息队列简单分为宏队列和微队列，这种说法⽬前已⽆法满⾜复杂的浏览器环境，取⽽代之的是⼀种更加灵活多变的处理⽅式。</p><p>根据 W3C 官⽅的解释，每个任务有不同的类型，同类型的任务必须在同⼀个队列，不同的任务可以属于不同的队列。不同任务队列有不同的优先级，在⼀次事件循环中，由浏览器⾃⾏决定取哪⼀个队列的任务。但浏览器必须有⼀个微队列，微队列的任务⼀定具有最⾼的优先级，必须优先调度执⾏。</p></blockquote><blockquote><p>⾯试题：JS 中的计时器能做到精确计时吗？为什么？</p><p>参考答案：不⾏</p><p>因为：</p><ol><li>计算机硬件没有原⼦钟，⽆法做到精确计时</li><li>操作系统的计时函数本身就有少量偏差，由于 JS 的计时器最终调⽤的是操作系统的函数，也就携带了这些偏差</li><li>按照 W3C 的标准，浏览器实现计时器时，如果嵌套层级超过 5 层，则会带有 4 毫秒的最少时间，这样在计时时间少于 4 毫秒时⼜带来了偏差</li><li>受事件循环的影响，计时器的回调函数只能在主线程空闲时运⾏，因此⼜带来了偏差</li></ol></blockquote>`,62),e=[o];function t(r,c,i,F,y,D){return a(),l("div",null,e)}const b=s(p,[["render",t]]);export{h as __pageData,b as default};
